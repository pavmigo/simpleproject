# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type LaneInfo implements Node {
  id: ID!
  laneNumber: Int!
  laneName: String!
}

type Manager implements Node {
  id: ID!
  user(where: UserWhereInput): User!
}

type Player implements Node {
  id: ID!
  user(where: UserWhereInput): User!
}

type ScorePoint implements Node {
  id: ID!
  scoreLane: String!
  score: String!
  createdAt: DateTime!
  createdBy(where: UserWhereInput): User!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  tournaments(where: TournamentWhereInput): Tournament!
}

type Tournament implements Node {
  id: ID!
  name: String!
  location: String!
  score(where: ScorePointWhereInput, orderBy: ScorePointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ScorePoint!]
  user(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  scorePoints(where: ScorePointWhereInput, orderBy: ScorePointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ScorePoint!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  tournaments(where: TournamentWhereInput, orderBy: TournamentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tournament!]
}

type Vote implements Node {
  id: ID!
  scorePoint(where: ScorePointWhereInput): ScorePoint!
  user(where: UserWhereInput): User!
}


#
# Other Types
#

type AggregateLaneInfo {
  count: Int!
}

type AggregateManager {
  count: Int!
}

type AggregatePlayer {
  count: Int!
}

type AggregateScorePoint {
  count: Int!
}

type AggregateTournament {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
A connection to a list of items.
"""
type LaneInfoConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [LaneInfoEdge]!
  aggregate: AggregateLaneInfo!
}

input LaneInfoCreateInput {
  laneNumber: Int!
  laneName: String!
}

"""
An edge in a connection.
"""
type LaneInfoEdge {
  """
  The item at the end of the edge.
  """
  node: LaneInfo!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum LaneInfoOrderByInput {
  id_ASC
  id_DESC
  laneNumber_ASC
  laneNumber_DESC
  laneName_ASC
  laneName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LaneInfoPreviousValues {
  id: ID!
  laneNumber: Int!
  laneName: String!
}

type LaneInfoSubscriptionPayload {
  mutation: MutationType!
  node: LaneInfo
  updatedFields: [String!]
  previousValues: LaneInfoPreviousValues
}

input LaneInfoSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LaneInfoSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LaneInfoSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [LaneInfoSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LaneInfoWhereInput
}

input LaneInfoUpdateInput {
  laneNumber: Int
  laneName: String
}

input LaneInfoWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LaneInfoWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LaneInfoWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [LaneInfoWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  laneNumber: Int
  """
  All values that are not equal to given value.
  """
  laneNumber_not: Int
  """
  All values that are contained in given list.
  """
  laneNumber_in: [Int!]
  """
  All values that are not contained in given list.
  """
  laneNumber_not_in: [Int!]
  """
  All values less than the given value.
  """
  laneNumber_lt: Int
  """
  All values less than or equal the given value.
  """
  laneNumber_lte: Int
  """
  All values greater than the given value.
  """
  laneNumber_gt: Int
  """
  All values greater than or equal the given value.
  """
  laneNumber_gte: Int
  laneName: String
  """
  All values that are not equal to given value.
  """
  laneName_not: String
  """
  All values that are contained in given list.
  """
  laneName_in: [String!]
  """
  All values that are not contained in given list.
  """
  laneName_not_in: [String!]
  """
  All values less than the given value.
  """
  laneName_lt: String
  """
  All values less than or equal the given value.
  """
  laneName_lte: String
  """
  All values greater than the given value.
  """
  laneName_gt: String
  """
  All values greater than or equal the given value.
  """
  laneName_gte: String
  """
  All values containing the given string.
  """
  laneName_contains: String
  """
  All values not containing the given string.
  """
  laneName_not_contains: String
  """
  All values starting with the given string.
  """
  laneName_starts_with: String
  """
  All values not starting with the given string.
  """
  laneName_not_starts_with: String
  """
  All values ending with the given string.
  """
  laneName_ends_with: String
  """
  All values not ending with the given string.
  """
  laneName_not_ends_with: String
}

input LaneInfoWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""
A connection to a list of items.
"""
type ManagerConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ManagerEdge]!
  aggregate: AggregateManager!
}

input ManagerCreateInput {
  user: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type ManagerEdge {
  """
  The item at the end of the edge.
  """
  node: Manager!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ManagerOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ManagerPreviousValues {
  id: ID!
}

type ManagerSubscriptionPayload {
  mutation: MutationType!
  node: Manager
  updatedFields: [String!]
  previousValues: ManagerPreviousValues
}

input ManagerSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ManagerSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ManagerSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ManagerSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ManagerWhereInput
}

input ManagerUpdateInput {
  user: UserUpdateOneInput
}

input ManagerWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ManagerWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ManagerWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ManagerWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  user: UserWhereInput
}

input ManagerWhereUniqueInput {
  id: ID
}

type Mutation {
  createScorePoint(data: ScorePointCreateInput!): ScorePoint!
  createLaneInfo(data: LaneInfoCreateInput!): LaneInfo!
  createVote(data: VoteCreateInput!): Vote!
  createTournament(data: TournamentCreateInput!): Tournament!
  createManager(data: ManagerCreateInput!): Manager!
  createPlayer(data: PlayerCreateInput!): Player!
  createUser(data: UserCreateInput!): User!
  updateScorePoint(data: ScorePointUpdateInput!, where: ScorePointWhereUniqueInput!): ScorePoint
  updateLaneInfo(data: LaneInfoUpdateInput!, where: LaneInfoWhereUniqueInput!): LaneInfo
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateTournament(data: TournamentUpdateInput!, where: TournamentWhereUniqueInput!): Tournament
  updateManager(data: ManagerUpdateInput!, where: ManagerWhereUniqueInput!): Manager
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteScorePoint(where: ScorePointWhereUniqueInput!): ScorePoint
  deleteLaneInfo(where: LaneInfoWhereUniqueInput!): LaneInfo
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteTournament(where: TournamentWhereUniqueInput!): Tournament
  deleteManager(where: ManagerWhereUniqueInput!): Manager
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteUser(where: UserWhereUniqueInput!): User
  upsertScorePoint(where: ScorePointWhereUniqueInput!, create: ScorePointCreateInput!, update: ScorePointUpdateInput!): ScorePoint!
  upsertLaneInfo(where: LaneInfoWhereUniqueInput!, create: LaneInfoCreateInput!, update: LaneInfoUpdateInput!): LaneInfo!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  upsertTournament(where: TournamentWhereUniqueInput!, create: TournamentCreateInput!, update: TournamentUpdateInput!): Tournament!
  upsertManager(where: ManagerWhereUniqueInput!, create: ManagerCreateInput!, update: ManagerUpdateInput!): Manager!
  upsertPlayer(where: PlayerWhereUniqueInput!, create: PlayerCreateInput!, update: PlayerUpdateInput!): Player!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyScorePoints(data: ScorePointUpdateInput!, where: ScorePointWhereInput): BatchPayload!
  updateManyLaneInfoes(data: LaneInfoUpdateInput!, where: LaneInfoWhereInput): BatchPayload!
  updateManyVotes(data: VoteUpdateInput!, where: VoteWhereInput): BatchPayload!
  updateManyTournaments(data: TournamentUpdateInput!, where: TournamentWhereInput): BatchPayload!
  updateManyManagers(data: ManagerUpdateInput!, where: ManagerWhereInput): BatchPayload!
  updateManyPlayers(data: PlayerUpdateInput!, where: PlayerWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyScorePoints(where: ScorePointWhereInput): BatchPayload!
  deleteManyLaneInfoes(where: LaneInfoWhereInput): BatchPayload!
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
  deleteManyTournaments(where: TournamentWhereInput): BatchPayload!
  deleteManyManagers(where: ManagerWhereInput): BatchPayload!
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PlayerConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PlayerEdge]!
  aggregate: AggregatePlayer!
}

input PlayerCreateInput {
  user: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type PlayerEdge {
  """
  The item at the end of the edge.
  """
  node: Player!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PlayerOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlayerPreviousValues {
  id: ID!
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
  updatedFields: [String!]
  previousValues: PlayerPreviousValues
}

input PlayerSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PlayerSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PlayerSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PlayerSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlayerWhereInput
}

input PlayerUpdateInput {
  user: UserUpdateOneInput
}

input PlayerWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PlayerWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PlayerWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PlayerWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  user: UserWhereInput
}

input PlayerWhereUniqueInput {
  id: ID
}

type Query {
  scorePoints(where: ScorePointWhereInput, orderBy: ScorePointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ScorePoint]!
  laneInfoes(where: LaneInfoWhereInput, orderBy: LaneInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LaneInfo]!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  tournaments(where: TournamentWhereInput, orderBy: TournamentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tournament]!
  managers(where: ManagerWhereInput, orderBy: ManagerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Manager]!
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  scorePoint(where: ScorePointWhereUniqueInput!): ScorePoint
  laneInfo(where: LaneInfoWhereUniqueInput!): LaneInfo
  vote(where: VoteWhereUniqueInput!): Vote
  tournament(where: TournamentWhereUniqueInput!): Tournament
  manager(where: ManagerWhereUniqueInput!): Manager
  player(where: PlayerWhereUniqueInput!): Player
  user(where: UserWhereUniqueInput!): User
  scorePointsConnection(where: ScorePointWhereInput, orderBy: ScorePointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScorePointConnection!
  laneInfoesConnection(where: LaneInfoWhereInput, orderBy: LaneInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LaneInfoConnection!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  tournamentsConnection(where: TournamentWhereInput, orderBy: TournamentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentConnection!
  managersConnection(where: ManagerWhereInput, orderBy: ManagerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ManagerConnection!
  playersConnection(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayerConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

"""
A connection to a list of items.
"""
type ScorePointConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ScorePointEdge]!
  aggregate: AggregateScorePoint!
}

input ScorePointCreateInput {
  scoreLane: String!
  score: String!
  createdBy: UserCreateOneWithoutScorePointsInput!
  votes: VoteCreateManyWithoutScorePointInput
  tournaments: TournamentCreateOneWithoutScoreInput!
}

input ScorePointCreateManyWithoutCreatedByInput {
  create: [ScorePointCreateWithoutCreatedByInput!]
  connect: [ScorePointWhereUniqueInput!]
}

input ScorePointCreateManyWithoutTournamentsInput {
  create: [ScorePointCreateWithoutTournamentsInput!]
  connect: [ScorePointWhereUniqueInput!]
}

input ScorePointCreateOneWithoutVotesInput {
  create: ScorePointCreateWithoutVotesInput
  connect: ScorePointWhereUniqueInput
}

input ScorePointCreateWithoutCreatedByInput {
  scoreLane: String!
  score: String!
  votes: VoteCreateManyWithoutScorePointInput
  tournaments: TournamentCreateOneWithoutScoreInput!
}

input ScorePointCreateWithoutTournamentsInput {
  scoreLane: String!
  score: String!
  createdBy: UserCreateOneWithoutScorePointsInput!
  votes: VoteCreateManyWithoutScorePointInput
}

input ScorePointCreateWithoutVotesInput {
  scoreLane: String!
  score: String!
  createdBy: UserCreateOneWithoutScorePointsInput!
  tournaments: TournamentCreateOneWithoutScoreInput!
}

"""
An edge in a connection.
"""
type ScorePointEdge {
  """
  The item at the end of the edge.
  """
  node: ScorePoint!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ScorePointOrderByInput {
  id_ASC
  id_DESC
  scoreLane_ASC
  scoreLane_DESC
  score_ASC
  score_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ScorePointPreviousValues {
  id: ID!
  scoreLane: String!
  score: String!
  createdAt: DateTime!
}

type ScorePointSubscriptionPayload {
  mutation: MutationType!
  node: ScorePoint
  updatedFields: [String!]
  previousValues: ScorePointPreviousValues
}

input ScorePointSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ScorePointSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ScorePointSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ScorePointSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScorePointWhereInput
}

input ScorePointUpdateInput {
  scoreLane: String
  score: String
  createdBy: UserUpdateOneWithoutScorePointsInput
  votes: VoteUpdateManyWithoutScorePointInput
  tournaments: TournamentUpdateOneWithoutScoreInput
}

input ScorePointUpdateManyWithoutCreatedByInput {
  create: [ScorePointCreateWithoutCreatedByInput!]
  connect: [ScorePointWhereUniqueInput!]
  disconnect: [ScorePointWhereUniqueInput!]
  delete: [ScorePointWhereUniqueInput!]
  update: [ScorePointUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ScorePointUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ScorePointUpdateManyWithoutTournamentsInput {
  create: [ScorePointCreateWithoutTournamentsInput!]
  connect: [ScorePointWhereUniqueInput!]
  disconnect: [ScorePointWhereUniqueInput!]
  delete: [ScorePointWhereUniqueInput!]
  update: [ScorePointUpdateWithWhereUniqueWithoutTournamentsInput!]
  upsert: [ScorePointUpsertWithWhereUniqueWithoutTournamentsInput!]
}

input ScorePointUpdateOneWithoutVotesInput {
  create: ScorePointCreateWithoutVotesInput
  connect: ScorePointWhereUniqueInput
  delete: Boolean
  update: ScorePointUpdateWithoutVotesDataInput
  upsert: ScorePointUpsertWithoutVotesInput
}

input ScorePointUpdateWithoutCreatedByDataInput {
  scoreLane: String
  score: String
  votes: VoteUpdateManyWithoutScorePointInput
  tournaments: TournamentUpdateOneWithoutScoreInput
}

input ScorePointUpdateWithoutTournamentsDataInput {
  scoreLane: String
  score: String
  createdBy: UserUpdateOneWithoutScorePointsInput
  votes: VoteUpdateManyWithoutScorePointInput
}

input ScorePointUpdateWithoutVotesDataInput {
  scoreLane: String
  score: String
  createdBy: UserUpdateOneWithoutScorePointsInput
  tournaments: TournamentUpdateOneWithoutScoreInput
}

input ScorePointUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ScorePointWhereUniqueInput!
  data: ScorePointUpdateWithoutCreatedByDataInput!
}

input ScorePointUpdateWithWhereUniqueWithoutTournamentsInput {
  where: ScorePointWhereUniqueInput!
  data: ScorePointUpdateWithoutTournamentsDataInput!
}

input ScorePointUpsertWithoutVotesInput {
  update: ScorePointUpdateWithoutVotesDataInput!
  create: ScorePointCreateWithoutVotesInput!
}

input ScorePointUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ScorePointWhereUniqueInput!
  update: ScorePointUpdateWithoutCreatedByDataInput!
  create: ScorePointCreateWithoutCreatedByInput!
}

input ScorePointUpsertWithWhereUniqueWithoutTournamentsInput {
  where: ScorePointWhereUniqueInput!
  update: ScorePointUpdateWithoutTournamentsDataInput!
  create: ScorePointCreateWithoutTournamentsInput!
}

input ScorePointWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ScorePointWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ScorePointWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ScorePointWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  scoreLane: String
  """
  All values that are not equal to given value.
  """
  scoreLane_not: String
  """
  All values that are contained in given list.
  """
  scoreLane_in: [String!]
  """
  All values that are not contained in given list.
  """
  scoreLane_not_in: [String!]
  """
  All values less than the given value.
  """
  scoreLane_lt: String
  """
  All values less than or equal the given value.
  """
  scoreLane_lte: String
  """
  All values greater than the given value.
  """
  scoreLane_gt: String
  """
  All values greater than or equal the given value.
  """
  scoreLane_gte: String
  """
  All values containing the given string.
  """
  scoreLane_contains: String
  """
  All values not containing the given string.
  """
  scoreLane_not_contains: String
  """
  All values starting with the given string.
  """
  scoreLane_starts_with: String
  """
  All values not starting with the given string.
  """
  scoreLane_not_starts_with: String
  """
  All values ending with the given string.
  """
  scoreLane_ends_with: String
  """
  All values not ending with the given string.
  """
  scoreLane_not_ends_with: String
  score: String
  """
  All values that are not equal to given value.
  """
  score_not: String
  """
  All values that are contained in given list.
  """
  score_in: [String!]
  """
  All values that are not contained in given list.
  """
  score_not_in: [String!]
  """
  All values less than the given value.
  """
  score_lt: String
  """
  All values less than or equal the given value.
  """
  score_lte: String
  """
  All values greater than the given value.
  """
  score_gt: String
  """
  All values greater than or equal the given value.
  """
  score_gte: String
  """
  All values containing the given string.
  """
  score_contains: String
  """
  All values not containing the given string.
  """
  score_not_contains: String
  """
  All values starting with the given string.
  """
  score_starts_with: String
  """
  All values not starting with the given string.
  """
  score_not_starts_with: String
  """
  All values ending with the given string.
  """
  score_ends_with: String
  """
  All values not ending with the given string.
  """
  score_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  tournaments: TournamentWhereInput
}

input ScorePointWhereUniqueInput {
  id: ID
}

type Subscription {
  scorePoint(where: ScorePointSubscriptionWhereInput): ScorePointSubscriptionPayload
  laneInfo(where: LaneInfoSubscriptionWhereInput): LaneInfoSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  tournament(where: TournamentSubscriptionWhereInput): TournamentSubscriptionPayload
  manager(where: ManagerSubscriptionWhereInput): ManagerSubscriptionPayload
  player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

"""
A connection to a list of items.
"""
type TournamentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [TournamentEdge]!
  aggregate: AggregateTournament!
}

input TournamentCreateInput {
  name: String!
  location: String!
  score: ScorePointCreateManyWithoutTournamentsInput
  user: UserCreateManyWithoutTournamentsInput
}

input TournamentCreateManyWithoutUserInput {
  create: [TournamentCreateWithoutUserInput!]
  connect: [TournamentWhereUniqueInput!]
}

input TournamentCreateOneWithoutScoreInput {
  create: TournamentCreateWithoutScoreInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateWithoutScoreInput {
  name: String!
  location: String!
  user: UserCreateManyWithoutTournamentsInput
}

input TournamentCreateWithoutUserInput {
  name: String!
  location: String!
  score: ScorePointCreateManyWithoutTournamentsInput
}

"""
An edge in a connection.
"""
type TournamentEdge {
  """
  The item at the end of the edge.
  """
  node: Tournament!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TournamentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  location_ASC
  location_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TournamentPreviousValues {
  id: ID!
  name: String!
  location: String!
}

type TournamentSubscriptionPayload {
  mutation: MutationType!
  node: Tournament
  updatedFields: [String!]
  previousValues: TournamentPreviousValues
}

input TournamentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TournamentSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TournamentSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TournamentSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TournamentWhereInput
}

input TournamentUpdateInput {
  name: String
  location: String
  score: ScorePointUpdateManyWithoutTournamentsInput
  user: UserUpdateManyWithoutTournamentsInput
}

input TournamentUpdateManyWithoutUserInput {
  create: [TournamentCreateWithoutUserInput!]
  connect: [TournamentWhereUniqueInput!]
  disconnect: [TournamentWhereUniqueInput!]
  delete: [TournamentWhereUniqueInput!]
  update: [TournamentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TournamentUpsertWithWhereUniqueWithoutUserInput!]
}

input TournamentUpdateOneWithoutScoreInput {
  create: TournamentCreateWithoutScoreInput
  connect: TournamentWhereUniqueInput
  delete: Boolean
  update: TournamentUpdateWithoutScoreDataInput
  upsert: TournamentUpsertWithoutScoreInput
}

input TournamentUpdateWithoutScoreDataInput {
  name: String
  location: String
  user: UserUpdateManyWithoutTournamentsInput
}

input TournamentUpdateWithoutUserDataInput {
  name: String
  location: String
  score: ScorePointUpdateManyWithoutTournamentsInput
}

input TournamentUpdateWithWhereUniqueWithoutUserInput {
  where: TournamentWhereUniqueInput!
  data: TournamentUpdateWithoutUserDataInput!
}

input TournamentUpsertWithoutScoreInput {
  update: TournamentUpdateWithoutScoreDataInput!
  create: TournamentCreateWithoutScoreInput!
}

input TournamentUpsertWithWhereUniqueWithoutUserInput {
  where: TournamentWhereUniqueInput!
  update: TournamentUpdateWithoutUserDataInput!
  create: TournamentCreateWithoutUserInput!
}

input TournamentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TournamentWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TournamentWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TournamentWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  location: String
  """
  All values that are not equal to given value.
  """
  location_not: String
  """
  All values that are contained in given list.
  """
  location_in: [String!]
  """
  All values that are not contained in given list.
  """
  location_not_in: [String!]
  """
  All values less than the given value.
  """
  location_lt: String
  """
  All values less than or equal the given value.
  """
  location_lte: String
  """
  All values greater than the given value.
  """
  location_gt: String
  """
  All values greater than or equal the given value.
  """
  location_gte: String
  """
  All values containing the given string.
  """
  location_contains: String
  """
  All values not containing the given string.
  """
  location_not_contains: String
  """
  All values starting with the given string.
  """
  location_starts_with: String
  """
  All values not starting with the given string.
  """
  location_not_starts_with: String
  """
  All values ending with the given string.
  """
  location_ends_with: String
  """
  All values not ending with the given string.
  """
  location_not_ends_with: String
  score_every: ScorePointWhereInput
  score_some: ScorePointWhereInput
  score_none: ScorePointWhereInput
  user_every: UserWhereInput
  user_some: UserWhereInput
  user_none: UserWhereInput
}

input TournamentWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  scorePoints: ScorePointCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  tournaments: TournamentCreateManyWithoutUserInput
}

input UserCreateManyWithoutTournamentsInput {
  create: [UserCreateWithoutTournamentsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutScorePointsInput {
  create: UserCreateWithoutScorePointsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutScorePointsInput {
  name: String!
  email: String!
  password: String!
  votes: VoteCreateManyWithoutUserInput
  tournaments: TournamentCreateManyWithoutUserInput
}

input UserCreateWithoutTournamentsInput {
  name: String!
  email: String!
  password: String!
  scorePoints: ScorePointCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  name: String!
  email: String!
  password: String!
  scorePoints: ScorePointCreateManyWithoutCreatedByInput
  tournaments: TournamentCreateManyWithoutUserInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  scorePoints: ScorePointUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  tournaments: TournamentUpdateManyWithoutUserInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  scorePoints: ScorePointUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  tournaments: TournamentUpdateManyWithoutUserInput
}

input UserUpdateManyWithoutTournamentsInput {
  create: [UserCreateWithoutTournamentsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTournamentsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTournamentsInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutScorePointsInput {
  create: UserCreateWithoutScorePointsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutScorePointsDataInput
  upsert: UserUpsertWithoutScorePointsInput
}

input UserUpdateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateWithoutScorePointsDataInput {
  name: String
  email: String
  password: String
  votes: VoteUpdateManyWithoutUserInput
  tournaments: TournamentUpdateManyWithoutUserInput
}

input UserUpdateWithoutTournamentsDataInput {
  name: String
  email: String
  password: String
  scorePoints: ScorePointUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesDataInput {
  name: String
  email: String
  password: String
  scorePoints: ScorePointUpdateManyWithoutCreatedByInput
  tournaments: TournamentUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutTournamentsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTournamentsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutScorePointsInput {
  update: UserUpdateWithoutScorePointsDataInput!
  create: UserCreateWithoutScorePointsInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserUpsertWithWhereUniqueWithoutTournamentsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTournamentsDataInput!
  create: UserCreateWithoutTournamentsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  scorePoints_every: ScorePointWhereInput
  scorePoints_some: ScorePointWhereInput
  scorePoints_none: ScorePointWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  tournaments_every: TournamentWhereInput
  tournaments_some: TournamentWhereInput
  tournaments_none: TournamentWhereInput
  _MagicalBackRelation_PlayerToUser_every: PlayerWhereInput
  _MagicalBackRelation_PlayerToUser_some: PlayerWhereInput
  _MagicalBackRelation_PlayerToUser_none: PlayerWhereInput
  _MagicalBackRelation_ManagerToUser_every: ManagerWhereInput
  _MagicalBackRelation_ManagerToUser_some: ManagerWhereInput
  _MagicalBackRelation_ManagerToUser_none: ManagerWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

"""
A connection to a list of items.
"""
type VoteConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  scorePoint: ScorePointCreateOneWithoutVotesInput!
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutScorePointInput {
  create: [VoteCreateWithoutScorePointInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutScorePointInput {
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  scorePoint: ScorePointCreateOneWithoutVotesInput!
}

"""
An edge in a connection.
"""
type VoteEdge {
  """
  The item at the end of the edge.
  """
  node: Vote!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VotePreviousValues {
  id: ID!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VoteSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VoteSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [VoteSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  scorePoint: ScorePointUpdateOneWithoutVotesInput
  user: UserUpdateOneWithoutVotesInput
}

input VoteUpdateManyWithoutScorePointInput {
  create: [VoteCreateWithoutScorePointInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutScorePointInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutScorePointInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
}

input VoteUpdateWithoutScorePointDataInput {
  user: UserUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  scorePoint: ScorePointUpdateOneWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutScorePointInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutScorePointDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutScorePointInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutScorePointDataInput!
  create: VoteCreateWithoutScorePointInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VoteWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VoteWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [VoteWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  scorePoint: ScorePointWhereInput
  user: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
