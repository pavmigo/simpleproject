# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type LaneInfo implements Node {
  id: ID!
  laneNumber: Int!
  laneName: String!
}

type ScorePoints implements Node {
  id: ID!
  scoreLane: String!
  score: String!
  createdAt: DateTime!
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  scorePoints(where: ScorePointsWhereInput, orderBy: ScorePointsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ScorePoints!]
}


#
# Other Types
#

type AggregateLaneInfo {
  count: Int!
}

type AggregateScorePoints {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
A connection to a list of items.
"""
type LaneInfoConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [LaneInfoEdge]!
  aggregate: AggregateLaneInfo!
}

input LaneInfoCreateInput {
  laneNumber: Int!
  laneName: String!
}

"""
An edge in a connection.
"""
type LaneInfoEdge {
  """
  The item at the end of the edge.
  """
  node: LaneInfo!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum LaneInfoOrderByInput {
  id_ASC
  id_DESC
  laneNumber_ASC
  laneNumber_DESC
  laneName_ASC
  laneName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LaneInfoPreviousValues {
  id: ID!
  laneNumber: Int!
  laneName: String!
}

type LaneInfoSubscriptionPayload {
  mutation: MutationType!
  node: LaneInfo
  updatedFields: [String!]
  previousValues: LaneInfoPreviousValues
}

input LaneInfoSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LaneInfoSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LaneInfoSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [LaneInfoSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LaneInfoWhereInput
}

input LaneInfoUpdateInput {
  laneNumber: Int
  laneName: String
}

input LaneInfoWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LaneInfoWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LaneInfoWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [LaneInfoWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  laneNumber: Int
  """
  All values that are not equal to given value.
  """
  laneNumber_not: Int
  """
  All values that are contained in given list.
  """
  laneNumber_in: [Int!]
  """
  All values that are not contained in given list.
  """
  laneNumber_not_in: [Int!]
  """
  All values less than the given value.
  """
  laneNumber_lt: Int
  """
  All values less than or equal the given value.
  """
  laneNumber_lte: Int
  """
  All values greater than the given value.
  """
  laneNumber_gt: Int
  """
  All values greater than or equal the given value.
  """
  laneNumber_gte: Int
  laneName: String
  """
  All values that are not equal to given value.
  """
  laneName_not: String
  """
  All values that are contained in given list.
  """
  laneName_in: [String!]
  """
  All values that are not contained in given list.
  """
  laneName_not_in: [String!]
  """
  All values less than the given value.
  """
  laneName_lt: String
  """
  All values less than or equal the given value.
  """
  laneName_lte: String
  """
  All values greater than the given value.
  """
  laneName_gt: String
  """
  All values greater than or equal the given value.
  """
  laneName_gte: String
  """
  All values containing the given string.
  """
  laneName_contains: String
  """
  All values not containing the given string.
  """
  laneName_not_contains: String
  """
  All values starting with the given string.
  """
  laneName_starts_with: String
  """
  All values not starting with the given string.
  """
  laneName_not_starts_with: String
  """
  All values ending with the given string.
  """
  laneName_ends_with: String
  """
  All values not ending with the given string.
  """
  laneName_not_ends_with: String
}

input LaneInfoWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createLaneInfo(data: LaneInfoCreateInput!): LaneInfo!
  createScorePoints(data: ScorePointsCreateInput!): ScorePoints!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateLaneInfo(data: LaneInfoUpdateInput!, where: LaneInfoWhereUniqueInput!): LaneInfo
  updateScorePoints(data: ScorePointsUpdateInput!, where: ScorePointsWhereUniqueInput!): ScorePoints
  deleteUser(where: UserWhereUniqueInput!): User
  deleteLaneInfo(where: LaneInfoWhereUniqueInput!): LaneInfo
  deleteScorePoints(where: ScorePointsWhereUniqueInput!): ScorePoints
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertLaneInfo(where: LaneInfoWhereUniqueInput!, create: LaneInfoCreateInput!, update: LaneInfoUpdateInput!): LaneInfo!
  upsertScorePoints(where: ScorePointsWhereUniqueInput!, create: ScorePointsCreateInput!, update: ScorePointsUpdateInput!): ScorePoints!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyLaneInfoes(data: LaneInfoUpdateInput!, where: LaneInfoWhereInput): BatchPayload!
  updateManyScorePointses(data: ScorePointsUpdateInput!, where: ScorePointsWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyLaneInfoes(where: LaneInfoWhereInput): BatchPayload!
  deleteManyScorePointses(where: ScorePointsWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  laneInfoes(where: LaneInfoWhereInput, orderBy: LaneInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LaneInfo]!
  scorePointses(where: ScorePointsWhereInput, orderBy: ScorePointsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ScorePoints]!
  user(where: UserWhereUniqueInput!): User
  laneInfo(where: LaneInfoWhereUniqueInput!): LaneInfo
  scorePoints(where: ScorePointsWhereUniqueInput!): ScorePoints
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  laneInfoesConnection(where: LaneInfoWhereInput, orderBy: LaneInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LaneInfoConnection!
  scorePointsesConnection(where: ScorePointsWhereInput, orderBy: ScorePointsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScorePointsConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

"""
A connection to a list of items.
"""
type ScorePointsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ScorePointsEdge]!
  aggregate: AggregateScorePoints!
}

input ScorePointsCreateInput {
  scoreLane: String!
  score: String!
}

input ScorePointsCreateManyInput {
  create: [ScorePointsCreateInput!]
  connect: [ScorePointsWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type ScorePointsEdge {
  """
  The item at the end of the edge.
  """
  node: ScorePoints!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ScorePointsOrderByInput {
  id_ASC
  id_DESC
  scoreLane_ASC
  scoreLane_DESC
  score_ASC
  score_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ScorePointsPreviousValues {
  id: ID!
  scoreLane: String!
  score: String!
  createdAt: DateTime!
}

type ScorePointsSubscriptionPayload {
  mutation: MutationType!
  node: ScorePoints
  updatedFields: [String!]
  previousValues: ScorePointsPreviousValues
}

input ScorePointsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ScorePointsSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ScorePointsSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ScorePointsSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScorePointsWhereInput
}

input ScorePointsUpdateDataInput {
  scoreLane: String
  score: String
}

input ScorePointsUpdateInput {
  scoreLane: String
  score: String
}

input ScorePointsUpdateManyInput {
  create: [ScorePointsCreateInput!]
  connect: [ScorePointsWhereUniqueInput!]
  disconnect: [ScorePointsWhereUniqueInput!]
  delete: [ScorePointsWhereUniqueInput!]
  update: [ScorePointsUpdateWithWhereUniqueNestedInput!]
  upsert: [ScorePointsUpsertWithWhereUniqueNestedInput!]
}

input ScorePointsUpdateWithWhereUniqueNestedInput {
  where: ScorePointsWhereUniqueInput!
  data: ScorePointsUpdateDataInput!
}

input ScorePointsUpsertWithWhereUniqueNestedInput {
  where: ScorePointsWhereUniqueInput!
  update: ScorePointsUpdateDataInput!
  create: ScorePointsCreateInput!
}

input ScorePointsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ScorePointsWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ScorePointsWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ScorePointsWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  scoreLane: String
  """
  All values that are not equal to given value.
  """
  scoreLane_not: String
  """
  All values that are contained in given list.
  """
  scoreLane_in: [String!]
  """
  All values that are not contained in given list.
  """
  scoreLane_not_in: [String!]
  """
  All values less than the given value.
  """
  scoreLane_lt: String
  """
  All values less than or equal the given value.
  """
  scoreLane_lte: String
  """
  All values greater than the given value.
  """
  scoreLane_gt: String
  """
  All values greater than or equal the given value.
  """
  scoreLane_gte: String
  """
  All values containing the given string.
  """
  scoreLane_contains: String
  """
  All values not containing the given string.
  """
  scoreLane_not_contains: String
  """
  All values starting with the given string.
  """
  scoreLane_starts_with: String
  """
  All values not starting with the given string.
  """
  scoreLane_not_starts_with: String
  """
  All values ending with the given string.
  """
  scoreLane_ends_with: String
  """
  All values not ending with the given string.
  """
  scoreLane_not_ends_with: String
  score: String
  """
  All values that are not equal to given value.
  """
  score_not: String
  """
  All values that are contained in given list.
  """
  score_in: [String!]
  """
  All values that are not contained in given list.
  """
  score_not_in: [String!]
  """
  All values less than the given value.
  """
  score_lt: String
  """
  All values less than or equal the given value.
  """
  score_lte: String
  """
  All values greater than the given value.
  """
  score_gt: String
  """
  All values greater than or equal the given value.
  """
  score_gte: String
  """
  All values containing the given string.
  """
  score_contains: String
  """
  All values not containing the given string.
  """
  score_not_contains: String
  """
  All values starting with the given string.
  """
  score_starts_with: String
  """
  All values not starting with the given string.
  """
  score_not_starts_with: String
  """
  All values ending with the given string.
  """
  score_ends_with: String
  """
  All values not ending with the given string.
  """
  score_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  _MagicalBackRelation_ScorePointsToUser_every: UserWhereInput
  _MagicalBackRelation_ScorePointsToUser_some: UserWhereInput
  _MagicalBackRelation_ScorePointsToUser_none: UserWhereInput
}

input ScorePointsWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  laneInfo(where: LaneInfoSubscriptionWhereInput): LaneInfoSubscriptionPayload
  scorePoints(where: ScorePointsSubscriptionWhereInput): ScorePointsSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  scorePoints: ScorePointsCreateManyInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  scorePoints: ScorePointsUpdateManyInput
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  scorePoints_every: ScorePointsWhereInput
  scorePoints_some: ScorePointsWhereInput
  scorePoints_none: ScorePointsWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
